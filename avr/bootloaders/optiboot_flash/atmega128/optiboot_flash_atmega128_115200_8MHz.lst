
optiboot_atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0001fe60  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000337  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000298  00000000  00000000  00000a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000390  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000206  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b4  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
	// Allow convenient way of calling do_spm function - jump table,
	//   so entry to this function will always be here, indepedent of compilation,
	//   features etc
	asm volatile (
   1fc00:	01 c0       	rjmp	.+2      	; 0x1fc04 <main>
   1fc02:	e2 c0       	rjmp	.+452    	; 0x1fdc8 <do_spm>

0001fc04 <main>:
	);
}


/* main program starts here */
int main(void) {
   1fc04:	1f 92       	push	r1
   1fc06:	cd b7       	in	r28, 0x3d	; 61
   1fc08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc0a:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega162__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
  SP=RAMEND;  // This is done by hardware reset
   1fc0c:	8f ef       	ldi	r24, 0xFF	; 255
   1fc0e:	90 e1       	ldi	r25, 0x10	; 16
   1fc10:	9e bf       	out	0x3e, r25	; 62
   1fc12:	8d bf       	out	0x3d, r24	; 61
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
  ch = MCUCSR;
   1fc14:	84 b7       	in	r24, 0x34	; 52
  MCUCSR = 0;
   1fc16:	14 be       	out	0x34, r1	; 52
  ch = MCUSR;
  MCUSR = 0;
#endif


  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
   1fc18:	98 2f       	mov	r25, r24
   1fc1a:	9d 70       	andi	r25, 0x0D	; 13
   1fc1c:	09 f0       	breq	.+2      	; 0x1fc20 <main+0x1c>
      appStart(ch);
   1fc1e:	05 d1       	rcall	.+522    	; 0x1fe2a <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc20:	85 e0       	ldi	r24, 0x05	; 5
   1fc22:	8e bd       	out	0x2e, r24	; 46
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc24:	82 e0       	ldi	r24, 0x02	; 2
   1fc26:	8b b9       	out	0x0b, r24	; 11
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc28:	88 e1       	ldi	r24, 0x18	; 24
   1fc2a:	8a b9       	out	0x0a, r24	; 10
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc2c:	86 e0       	ldi	r24, 0x06	; 6
   1fc2e:	80 93 95 00 	sts	0x0095, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc32:	88 e0       	ldi	r24, 0x08	; 8
   1fc34:	89 b9       	out	0x09, r24	; 9
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc36:	8e e0       	ldi	r24, 0x0E	; 14
   1fc38:	e5 d0       	rcall	.+458    	; 0x1fe04 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc3a:	bd 9a       	sbi	0x17, 5	; 23
   1fc3c:	24 e0       	ldi	r18, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc3e:	88 e1       	ldi	r24, 0x18	; 24
   1fc40:	9e ef       	ldi	r25, 0xFE	; 254
    TIFR1 = _BV(TOV1);
   1fc42:	54 e0       	ldi	r21, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega162__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
    LED_PORT ^= _BV(LED);
   1fc44:	40 e2       	ldi	r20, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc46:	9d bd       	out	0x2d, r25	; 45
   1fc48:	8c bd       	out	0x2c, r24	; 44
    TIFR1 = _BV(TOV1);
   1fc4a:	56 bf       	out	0x36, r21	; 54
    while(!(TIFR1 & _BV(TOV1)));
   1fc4c:	06 b6       	in	r0, 0x36	; 54
   1fc4e:	02 fe       	sbrs	r0, 2
   1fc50:	fd cf       	rjmp	.-6      	; 0x1fc4c <main+0x48>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega162__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
    LED_PORT ^= _BV(LED);
   1fc52:	38 b3       	in	r19, 0x18	; 24
   1fc54:	34 27       	eor	r19, r20
   1fc56:	38 bb       	out	0x18, r19	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc58:	a8 95       	wdr
   1fc5a:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc5c:	a1 f7       	brne	.-24     	; 0x1fc46 <main+0x42>
   1fc5e:	81 2c       	mov	r8, r1
   1fc60:	91 2c       	mov	r9, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc62:	c9 d0       	rcall	.+402    	; 0x1fdf6 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc64:	81 34       	cpi	r24, 0x41	; 65
   1fc66:	71 f4       	brne	.+28     	; 0x1fc84 <main+0x80>
      unsigned char which = getch();
   1fc68:	c6 d0       	rcall	.+396    	; 0x1fdf6 <getch>
      verifySpace();
   1fc6a:	89 83       	std	Y+1, r24	; 0x01
   1fc6c:	cf d0       	rcall	.+414    	; 0x1fe0c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
   1fc6e:	89 81       	ldd	r24, Y+1	; 0x01
   1fc70:	82 38       	cpi	r24, 0x82	; 130
   1fc72:	09 f4       	brne	.+2      	; 0x1fc76 <main+0x72>
   1fc74:	9f c0       	rjmp	.+318    	; 0x1fdb4 <main+0x1b0>
	  putch(optiboot_version & 0xFF);
      } else if (which == 0x81) {
   1fc76:	81 38       	cpi	r24, 0x81	; 129
   1fc78:	11 f4       	brne	.+4      	; 0x1fc7e <main+0x7a>
	  putch(optiboot_version >> 8);
   1fc7a:	86 e0       	ldi	r24, 0x06	; 6
   1fc7c:	01 c0       	rjmp	.+2      	; 0x1fc80 <main+0x7c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc7e:	83 e0       	ldi	r24, 0x03	; 3
   1fc80:	b6 d0       	rcall	.+364    	; 0x1fdee <putch>
   1fc82:	9f c0       	rjmp	.+318    	; 0x1fdc2 <main+0x1be>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc84:	82 34       	cpi	r24, 0x42	; 66
   1fc86:	11 f4       	brne	.+4      	; 0x1fc8c <main+0x88>
      // SET DEVICE is ignored
      getNch(20);
   1fc88:	84 e1       	ldi	r24, 0x14	; 20
   1fc8a:	03 c0       	rjmp	.+6      	; 0x1fc92 <main+0x8e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc8c:	85 34       	cpi	r24, 0x45	; 69
   1fc8e:	19 f4       	brne	.+6      	; 0x1fc96 <main+0x92>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc90:	85 e0       	ldi	r24, 0x05	; 5
   1fc92:	c4 d0       	rcall	.+392    	; 0x1fe1c <getNch>
   1fc94:	96 c0       	rjmp	.+300    	; 0x1fdc2 <main+0x1be>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fc96:	85 35       	cpi	r24, 0x55	; 85
   1fc98:	69 f4       	brne	.+26     	; 0x1fcb4 <main+0xb0>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fc9a:	ad d0       	rcall	.+346    	; 0x1fdf6 <getch>
   1fc9c:	88 2e       	mov	r8, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fc9e:	ab d0       	rcall	.+342    	; 0x1fdf6 <getch>
   1fca0:	91 2c       	mov	r9, r1
   1fca2:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fca4:	89 2d       	mov	r24, r9
   1fca6:	88 1f       	adc	r24, r24
   1fca8:	88 27       	eor	r24, r24
   1fcaa:	88 1f       	adc	r24, r24
   1fcac:	8b bf       	out	0x3b, r24	; 59
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcae:	88 0c       	add	r8, r8
   1fcb0:	99 1c       	adc	r9, r9
   1fcb2:	86 c0       	rjmp	.+268    	; 0x1fdc0 <main+0x1bc>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fcb4:	86 35       	cpi	r24, 0x56	; 86
   1fcb6:	21 f4       	brne	.+8      	; 0x1fcc0 <main+0xbc>
      // UNIVERSAL command is ignored
      getNch(4);
   1fcb8:	84 e0       	ldi	r24, 0x04	; 4
   1fcba:	b0 d0       	rcall	.+352    	; 0x1fe1c <getNch>
      putch(0x00);
   1fcbc:	80 e0       	ldi	r24, 0x00	; 0
   1fcbe:	e0 cf       	rjmp	.-64     	; 0x1fc80 <main+0x7c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcc0:	84 36       	cpi	r24, 0x64	; 100
   1fcc2:	09 f0       	breq	.+2      	; 0x1fcc6 <main+0xc2>
   1fcc4:	4a c0       	rjmp	.+148    	; 0x1fd5a <main+0x156>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcc6:	97 d0       	rcall	.+302    	; 0x1fdf6 <getch>
   1fcc8:	e8 2e       	mov	r14, r24
   1fcca:	f1 2c       	mov	r15, r1
   1fccc:	fe 2c       	mov	r15, r14
   1fcce:	ee 24       	eor	r14, r14
   1fcd0:	92 d0       	rcall	.+292    	; 0x1fdf6 <getch>
   1fcd2:	e8 2a       	or	r14, r24
      savelength = length;
      desttype = getch();
   1fcd4:	90 d0       	rcall	.+288    	; 0x1fdf6 <getch>
   1fcd6:	b8 2e       	mov	r11, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcd8:	87 01       	movw	r16, r14
      savelength = length;
      desttype = getch();
   1fcda:	c1 2c       	mov	r12, r1
   1fcdc:	dd 24       	eor	r13, r13
   1fcde:	d3 94       	inc	r13

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fce0:	8a d0       	rcall	.+276    	; 0x1fdf6 <getch>
   1fce2:	f6 01       	movw	r30, r12
   1fce4:	81 93       	st	Z+, r24
   1fce6:	6f 01       	movw	r12, r30
      while (--length);
   1fce8:	01 50       	subi	r16, 0x01	; 1
   1fcea:	11 09       	sbc	r17, r1
   1fcec:	01 15       	cp	r16, r1
   1fcee:	11 05       	cpc	r17, r1
   1fcf0:	b9 f7       	brne	.-18     	; 0x1fce0 <main+0xdc>

      // Read command terminator, start reply
      verifySpace();
   1fcf2:	8c d0       	rcall	.+280    	; 0x1fe0c <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
   1fcf4:	f5 e4       	ldi	r31, 0x45	; 69
   1fcf6:	bf 12       	cpse	r11, r31
   1fcf8:	12 c0       	rjmp	.+36     	; 0x1fd1e <main+0x11a>
   1fcfa:	e8 0c       	add	r14, r8
   1fcfc:	f9 1c       	adc	r15, r9
   1fcfe:	84 01       	movw	r16, r8
   1fd00:	c1 2c       	mov	r12, r1
   1fd02:	dd 24       	eor	r13, r13
   1fd04:	d3 94       	inc	r13
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
   1fd06:	0e 15       	cp	r16, r14
   1fd08:	1f 05       	cpc	r17, r15
   1fd0a:	09 f4       	brne	.+2      	; 0x1fd0e <main+0x10a>
   1fd0c:	5a c0       	rjmp	.+180    	; 0x1fdc2 <main+0x1be>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
   1fd0e:	f6 01       	movw	r30, r12
   1fd10:	61 91       	ld	r22, Z+
   1fd12:	6f 01       	movw	r12, r30
   1fd14:	c8 01       	movw	r24, r16
   1fd16:	97 d0       	rcall	.+302    	; 0x1fe46 <__eewr_byte_m128>
   1fd18:	0f 5f       	subi	r16, 0xFF	; 255
   1fd1a:	1f 4f       	sbci	r17, 0xFF	; 255
   1fd1c:	f4 cf       	rjmp	.-24     	; 0x1fd06 <main+0x102>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
			do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
   1fd1e:	40 e0       	ldi	r20, 0x00	; 0
   1fd20:	50 e0       	ldi	r21, 0x00	; 0
   1fd22:	63 e0       	ldi	r22, 0x03	; 3
   1fd24:	c4 01       	movw	r24, r8
   1fd26:	50 d0       	rcall	.+160    	; 0x1fdc8 <do_spm>
   1fd28:	00 e0       	ldi	r16, 0x00	; 0
   1fd2a:	10 e0       	ldi	r17, 0x00	; 0
   1fd2c:	f8 01       	movw	r30, r16
   1fd2e:	f3 95       	inc	r31
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
   1fd30:	40 81       	ld	r20, Z
   1fd32:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
   1fd34:	80 81       	ld	r24, Z
   1fd36:	50 e0       	ldi	r21, 0x00	; 0
   1fd38:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
   1fd3a:	61 e0       	ldi	r22, 0x01	; 1
   1fd3c:	c8 01       	movw	r24, r16
   1fd3e:	88 0d       	add	r24, r8
   1fd40:	99 1d       	adc	r25, r9
   1fd42:	42 d0       	rcall	.+132    	; 0x1fdc8 <do_spm>
   1fd44:	0e 5f       	subi	r16, 0xFE	; 254
   1fd46:	1f 4f       	sbci	r17, 0xFF	; 255
		addrPtr += 2;
	    } while (len -= 2);
   1fd48:	e0 16       	cp	r14, r16
   1fd4a:	f1 06       	cpc	r15, r17
   1fd4c:	79 f7       	brne	.-34     	; 0x1fd2c <main+0x128>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
			do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
   1fd4e:	40 e0       	ldi	r20, 0x00	; 0
   1fd50:	50 e0       	ldi	r21, 0x00	; 0
   1fd52:	65 e0       	ldi	r22, 0x05	; 5
   1fd54:	c4 01       	movw	r24, r8
   1fd56:	38 d0       	rcall	.+112    	; 0x1fdc8 <do_spm>
   1fd58:	34 c0       	rjmp	.+104    	; 0x1fdc2 <main+0x1be>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd5a:	84 37       	cpi	r24, 0x74	; 116
   1fd5c:	21 f5       	brne	.+72     	; 0x1fda6 <main+0x1a2>
      uint8_t desttype;
      GETLENGTH(length);
   1fd5e:	4b d0       	rcall	.+150    	; 0x1fdf6 <getch>
   1fd60:	08 2f       	mov	r16, r24
   1fd62:	10 e0       	ldi	r17, 0x00	; 0
   1fd64:	10 2f       	mov	r17, r16
   1fd66:	00 27       	eor	r16, r16
   1fd68:	46 d0       	rcall	.+140    	; 0x1fdf6 <getch>
   1fd6a:	08 2b       	or	r16, r24

      desttype = getch();
   1fd6c:	44 d0       	rcall	.+136    	; 0x1fdf6 <getch>

      verifySpace();
   1fd6e:	89 83       	std	Y+1, r24	; 0x01
   1fd70:	4d d0       	rcall	.+154    	; 0x1fe0c <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fd72:	89 81       	ldd	r24, Y+1	; 0x01
   1fd74:	74 01       	movw	r14, r8
   1fd76:	85 34       	cpi	r24, 0x45	; 69
   1fd78:	61 f4       	brne	.+24     	; 0x1fd92 <main+0x18e>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
   1fd7a:	c7 01       	movw	r24, r14
   1fd7c:	5c d0       	rcall	.+184    	; 0x1fe36 <__eerd_byte_m128>
   1fd7e:	37 d0       	rcall	.+110    	; 0x1fdee <putch>
	} while (--length);
   1fd80:	01 50       	subi	r16, 0x01	; 1
   1fd82:	11 09       	sbc	r17, r1
   1fd84:	ff ef       	ldi	r31, 0xFF	; 255
   1fd86:	ef 1a       	sub	r14, r31
   1fd88:	ff 0a       	sbc	r15, r31
   1fd8a:	01 15       	cp	r16, r1
   1fd8c:	11 05       	cpc	r17, r1
   1fd8e:	a9 f7       	brne	.-22     	; 0x1fd7a <main+0x176>
   1fd90:	18 c0       	rjmp	.+48     	; 0x1fdc2 <main+0x1be>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fd92:	f7 01       	movw	r30, r14
   1fd94:	87 91       	elpm	r24, Z+
   1fd96:	7f 01       	movw	r14, r30
   1fd98:	2a d0       	rcall	.+84     	; 0x1fdee <putch>
	} while (--length);
   1fd9a:	01 50       	subi	r16, 0x01	; 1
   1fd9c:	11 09       	sbc	r17, r1
   1fd9e:	01 15       	cp	r16, r1
   1fda0:	11 05       	cpc	r17, r1
   1fda2:	b9 f7       	brne	.-18     	; 0x1fd92 <main+0x18e>
   1fda4:	0e c0       	rjmp	.+28     	; 0x1fdc2 <main+0x1be>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fda6:	85 37       	cpi	r24, 0x75	; 117
   1fda8:	39 f4       	brne	.+14     	; 0x1fdb8 <main+0x1b4>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fdaa:	30 d0       	rcall	.+96     	; 0x1fe0c <verifySpace>
      putch(SIGNATURE_0);
   1fdac:	8e e1       	ldi	r24, 0x1E	; 30
   1fdae:	1f d0       	rcall	.+62     	; 0x1fdee <putch>
      putch(SIGNATURE_1);
   1fdb0:	87 e9       	ldi	r24, 0x97	; 151
   1fdb2:	1d d0       	rcall	.+58     	; 0x1fdee <putch>
      putch(SIGNATURE_2);
   1fdb4:	82 e0       	ldi	r24, 0x02	; 2
   1fdb6:	64 cf       	rjmp	.-312    	; 0x1fc80 <main+0x7c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fdb8:	81 35       	cpi	r24, 0x51	; 81
   1fdba:	11 f4       	brne	.+4      	; 0x1fdc0 <main+0x1bc>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fdbc:	88 e0       	ldi	r24, 0x08	; 8
   1fdbe:	22 d0       	rcall	.+68     	; 0x1fe04 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fdc0:	25 d0       	rcall	.+74     	; 0x1fe0c <verifySpace>
    }
    putch(STK_OK);
   1fdc2:	80 e1       	ldi	r24, 0x10	; 16
   1fdc4:	14 d0       	rcall	.+40     	; 0x1fdee <putch>
  }
   1fdc6:	4d cf       	rjmp	.-358    	; 0x1fc62 <main+0x5e>

0001fdc8 <do_spm>:
        "z" ((uint16_t)address),
        "r" ((uint16_t)data)
    : "r0"
    );
#else
     asm volatile (
   1fdc8:	fc 01       	movw	r30, r24
   1fdca:	0a 01       	movw	r0, r20
   1fdcc:	60 93 68 00 	sts	0x0068, r22
   1fdd0:	e8 95       	spm
   1fdd2:	11 24       	eor	r1, r1
#endif    

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
   1fdd4:	80 91 68 00 	lds	r24, 0x0068
   1fdd8:	80 fd       	sbrc	r24, 0
   1fdda:	fc cf       	rjmp	.-8      	; 0x1fdd4 <do_spm+0xc>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   1fddc:	66 70       	andi	r22, 0x06	; 6
   1fdde:	31 f0       	breq	.+12     	; 0x1fdec <do_spm+0x24>
   1fde0:	45 2b       	or	r20, r21
   1fde2:	21 f4       	brne	.+8      	; 0x1fdec <do_spm+0x24>
      // Reenable read access to flash
#if !defined(__AVR_ATmega64__) && !defined(__AVR_ATmega128__)      
      boot_rww_enable();
#else
      __boot_rww_enable();
   1fde4:	81 e1       	ldi	r24, 0x11	; 17
   1fde6:	80 93 68 00 	sts	0x0068, r24
   1fdea:	e8 95       	spm
   1fdec:	08 95       	ret

0001fdee <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fdee:	5d 9b       	sbis	0x0b, 5	; 11
   1fdf0:	fe cf       	rjmp	.-4      	; 0x1fdee <putch>
  UART_UDR = ch;
   1fdf2:	8c b9       	out	0x0c, r24	; 12
   1fdf4:	08 95       	ret

0001fdf6 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fdf6:	5f 9b       	sbis	0x0b, 7	; 11
   1fdf8:	fe cf       	rjmp	.-4      	; 0x1fdf6 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fdfa:	5c 99       	sbic	0x0b, 4	; 11
   1fdfc:	01 c0       	rjmp	.+2      	; 0x1fe00 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fdfe:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fe00:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fe02:	08 95       	ret

0001fe04 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe04:	98 e1       	ldi	r25, 0x18	; 24
   1fe06:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
   1fe08:	81 bd       	out	0x21, r24	; 33
   1fe0a:	08 95       	ret

0001fe0c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe0c:	f4 df       	rcall	.-24     	; 0x1fdf6 <getch>
   1fe0e:	80 32       	cpi	r24, 0x20	; 32
   1fe10:	19 f0       	breq	.+6      	; 0x1fe18 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe12:	88 e0       	ldi	r24, 0x08	; 8
   1fe14:	f7 df       	rcall	.-18     	; 0x1fe04 <watchdogConfig>
   1fe16:	ff cf       	rjmp	.-2      	; 0x1fe16 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe18:	84 e1       	ldi	r24, 0x14	; 20
   1fe1a:	e9 cf       	rjmp	.-46     	; 0x1fdee <putch>

0001fe1c <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe1c:	cf 93       	push	r28
   1fe1e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe20:	ea df       	rcall	.-44     	; 0x1fdf6 <getch>
   1fe22:	c1 50       	subi	r28, 0x01	; 1
   1fe24:	e9 f7       	brne	.-6      	; 0x1fe20 <getNch+0x4>
  verifySpace();
}
   1fe26:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fe28:	f1 cf       	rjmp	.-30     	; 0x1fe0c <verifySpace>

0001fe2a <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe2a:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe2c:	80 e0       	ldi	r24, 0x00	; 0
   1fe2e:	ea df       	rcall	.-44     	; 0x1fe04 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fe30:	e0 e0       	ldi	r30, 0x00	; 0
   1fe32:	ff 27       	eor	r31, r31
   1fe34:	09 94       	ijmp

0001fe36 <__eerd_byte_m128>:
   1fe36:	e1 99       	sbic	0x1c, 1	; 28
   1fe38:	fe cf       	rjmp	.-4      	; 0x1fe36 <__eerd_byte_m128>
   1fe3a:	9f bb       	out	0x1f, r25	; 31
   1fe3c:	8e bb       	out	0x1e, r24	; 30
   1fe3e:	e0 9a       	sbi	0x1c, 0	; 28
   1fe40:	99 27       	eor	r25, r25
   1fe42:	8d b3       	in	r24, 0x1d	; 29
   1fe44:	08 95       	ret

0001fe46 <__eewr_byte_m128>:
   1fe46:	26 2f       	mov	r18, r22

0001fe48 <__eewr_r18_m128>:
   1fe48:	e1 99       	sbic	0x1c, 1	; 28
   1fe4a:	fe cf       	rjmp	.-4      	; 0x1fe48 <__eewr_r18_m128>
   1fe4c:	9f bb       	out	0x1f, r25	; 31
   1fe4e:	8e bb       	out	0x1e, r24	; 30
   1fe50:	2d bb       	out	0x1d, r18	; 29
   1fe52:	0f b6       	in	r0, 0x3f	; 63
   1fe54:	f8 94       	cli
   1fe56:	e2 9a       	sbi	0x1c, 2	; 28
   1fe58:	e1 9a       	sbi	0x1c, 1	; 28
   1fe5a:	0f be       	out	0x3f, r0	; 63
   1fe5c:	01 96       	adiw	r24, 0x01	; 1
   1fe5e:	08 95       	ret
