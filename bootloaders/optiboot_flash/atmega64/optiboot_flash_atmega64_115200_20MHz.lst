
optiboot_atmega64.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000fe56  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  0000fc00  0000fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0000fffe  0000fffe  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000298  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00000cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000203  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b4  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
	// Allow convenient way of calling do_spm function - jump table,
	//   so entry to this function will always be here, indepedent of compilation,
	//   features etc
	asm volatile (
    fc00:	01 c0       	rjmp	.+2      	; 0xfc04 <main>
    fc02:	dd c0       	rjmp	.+442    	; 0xfdbe <do_spm>

0000fc04 <main>:
	);
}


/* main program starts here */
int main(void) {
    fc04:	1f 92       	push	r1
    fc06:	cd b7       	in	r28, 0x3d	; 61
    fc08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    fc0a:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega162__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
  SP=RAMEND;  // This is done by hardware reset
    fc0c:	8f ef       	ldi	r24, 0xFF	; 255
    fc0e:	90 e1       	ldi	r25, 0x10	; 16
    fc10:	9e bf       	out	0x3e, r25	; 62
    fc12:	8d bf       	out	0x3d, r24	; 61
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
  ch = MCUCSR;
    fc14:	84 b7       	in	r24, 0x34	; 52
  MCUCSR = 0;
    fc16:	14 be       	out	0x34, r1	; 52
  ch = MCUSR;
  MCUSR = 0;
#endif


  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    fc18:	98 2f       	mov	r25, r24
    fc1a:	9d 70       	andi	r25, 0x0D	; 13
    fc1c:	09 f0       	breq	.+2      	; 0xfc20 <main+0x1c>
      appStart(ch);
    fc1e:	00 d1       	rcall	.+512    	; 0xfe20 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc20:	85 e0       	ldi	r24, 0x05	; 5
    fc22:	8e bd       	out	0x2e, r24	; 46
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    fc24:	82 e0       	ldi	r24, 0x02	; 2
    fc26:	8b b9       	out	0x0b, r24	; 11
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    fc28:	88 e1       	ldi	r24, 0x18	; 24
    fc2a:	8a b9       	out	0x0a, r24	; 10
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    fc2c:	86 e0       	ldi	r24, 0x06	; 6
    fc2e:	80 93 95 00 	sts	0x0095, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fc32:	85 e1       	ldi	r24, 0x15	; 21
    fc34:	89 b9       	out	0x09, r24	; 9
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    fc36:	8e e0       	ldi	r24, 0x0E	; 14
    fc38:	e0 d0       	rcall	.+448    	; 0xfdfa <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fc3a:	bd 9a       	sbi	0x17, 5	; 23
    fc3c:	24 e0       	ldi	r18, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc3e:	8c e3       	ldi	r24, 0x3C	; 60
    fc40:	9b ef       	ldi	r25, 0xFB	; 251
    TIFR1 = _BV(TOV1);
    fc42:	54 e0       	ldi	r21, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega162__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
    LED_PORT ^= _BV(LED);
    fc44:	40 e2       	ldi	r20, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc46:	9d bd       	out	0x2d, r25	; 45
    fc48:	8c bd       	out	0x2c, r24	; 44
    TIFR1 = _BV(TOV1);
    fc4a:	56 bf       	out	0x36, r21	; 54
    while(!(TIFR1 & _BV(TOV1)));
    fc4c:	06 b6       	in	r0, 0x36	; 54
    fc4e:	02 fe       	sbrs	r0, 2
    fc50:	fd cf       	rjmp	.-6      	; 0xfc4c <main+0x48>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega162__) || defined (__AVR_ATmega128__) || defined (__AVR_ATmega64__)
    LED_PORT ^= _BV(LED);
    fc52:	38 b3       	in	r19, 0x18	; 24
    fc54:	34 27       	eor	r19, r20
    fc56:	38 bb       	out	0x18, r19	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc58:	a8 95       	wdr
    fc5a:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    fc5c:	a1 f7       	brne	.-24     	; 0xfc46 <main+0x42>
    fc5e:	81 2c       	mov	r8, r1
    fc60:	91 2c       	mov	r9, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc62:	c4 d0       	rcall	.+392    	; 0xfdec <getch>

    if(ch == STK_GET_PARAMETER) {
    fc64:	81 34       	cpi	r24, 0x41	; 65
    fc66:	71 f4       	brne	.+28     	; 0xfc84 <main+0x80>
      unsigned char which = getch();
    fc68:	c1 d0       	rcall	.+386    	; 0xfdec <getch>
      verifySpace();
    fc6a:	89 83       	std	Y+1, r24	; 0x01
    fc6c:	ca d0       	rcall	.+404    	; 0xfe02 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    fc6e:	89 81       	ldd	r24, Y+1	; 0x01
    fc70:	82 38       	cpi	r24, 0x82	; 130
    fc72:	09 f4       	brne	.+2      	; 0xfc76 <main+0x72>
    fc74:	9a c0       	rjmp	.+308    	; 0xfdaa <main+0x1a6>
	  putch(optiboot_version & 0xFF);
      } else if (which == 0x81) {
    fc76:	81 38       	cpi	r24, 0x81	; 129
    fc78:	11 f4       	brne	.+4      	; 0xfc7e <main+0x7a>
	  putch(optiboot_version >> 8);
    fc7a:	86 e0       	ldi	r24, 0x06	; 6
    fc7c:	01 c0       	rjmp	.+2      	; 0xfc80 <main+0x7c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    fc7e:	83 e0       	ldi	r24, 0x03	; 3
    fc80:	b1 d0       	rcall	.+354    	; 0xfde4 <putch>
    fc82:	9a c0       	rjmp	.+308    	; 0xfdb8 <main+0x1b4>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    fc84:	82 34       	cpi	r24, 0x42	; 66
    fc86:	11 f4       	brne	.+4      	; 0xfc8c <main+0x88>
      // SET DEVICE is ignored
      getNch(20);
    fc88:	84 e1       	ldi	r24, 0x14	; 20
    fc8a:	03 c0       	rjmp	.+6      	; 0xfc92 <main+0x8e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc8c:	85 34       	cpi	r24, 0x45	; 69
    fc8e:	19 f4       	brne	.+6      	; 0xfc96 <main+0x92>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc90:	85 e0       	ldi	r24, 0x05	; 5
    fc92:	bf d0       	rcall	.+382    	; 0xfe12 <getNch>
    fc94:	91 c0       	rjmp	.+290    	; 0xfdb8 <main+0x1b4>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc96:	85 35       	cpi	r24, 0x55	; 85
    fc98:	41 f4       	brne	.+16     	; 0xfcaa <main+0xa6>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    fc9a:	a8 d0       	rcall	.+336    	; 0xfdec <getch>
    fc9c:	88 2e       	mov	r8, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    fc9e:	a6 d0       	rcall	.+332    	; 0xfdec <getch>
    fca0:	91 2c       	mov	r9, r1
    fca2:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    fca4:	88 0c       	add	r8, r8
    fca6:	99 1c       	adc	r9, r9
    fca8:	86 c0       	rjmp	.+268    	; 0xfdb6 <main+0x1b2>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    fcaa:	86 35       	cpi	r24, 0x56	; 86
    fcac:	21 f4       	brne	.+8      	; 0xfcb6 <main+0xb2>
      // UNIVERSAL command is ignored
      getNch(4);
    fcae:	84 e0       	ldi	r24, 0x04	; 4
    fcb0:	b0 d0       	rcall	.+352    	; 0xfe12 <getNch>
      putch(0x00);
    fcb2:	80 e0       	ldi	r24, 0x00	; 0
    fcb4:	e5 cf       	rjmp	.-54     	; 0xfc80 <main+0x7c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fcb6:	84 36       	cpi	r24, 0x64	; 100
    fcb8:	09 f0       	breq	.+2      	; 0xfcbc <main+0xb8>
    fcba:	4a c0       	rjmp	.+148    	; 0xfd50 <main+0x14c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcbc:	97 d0       	rcall	.+302    	; 0xfdec <getch>
    fcbe:	e8 2e       	mov	r14, r24
    fcc0:	f1 2c       	mov	r15, r1
    fcc2:	fe 2c       	mov	r15, r14
    fcc4:	ee 24       	eor	r14, r14
    fcc6:	92 d0       	rcall	.+292    	; 0xfdec <getch>
    fcc8:	e8 2a       	or	r14, r24
      savelength = length;
      desttype = getch();
    fcca:	90 d0       	rcall	.+288    	; 0xfdec <getch>
    fccc:	b8 2e       	mov	r11, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcce:	87 01       	movw	r16, r14
      savelength = length;
      desttype = getch();
    fcd0:	c1 2c       	mov	r12, r1
    fcd2:	dd 24       	eor	r13, r13
    fcd4:	d3 94       	inc	r13

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fcd6:	8a d0       	rcall	.+276    	; 0xfdec <getch>
    fcd8:	f6 01       	movw	r30, r12
    fcda:	81 93       	st	Z+, r24
    fcdc:	6f 01       	movw	r12, r30
      while (--length);
    fcde:	01 50       	subi	r16, 0x01	; 1
    fce0:	11 09       	sbc	r17, r1
    fce2:	01 15       	cp	r16, r1
    fce4:	11 05       	cpc	r17, r1
    fce6:	b9 f7       	brne	.-18     	; 0xfcd6 <main+0xd2>

      // Read command terminator, start reply
      verifySpace();
    fce8:	8c d0       	rcall	.+280    	; 0xfe02 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    fcea:	f5 e4       	ldi	r31, 0x45	; 69
    fcec:	bf 12       	cpse	r11, r31
    fcee:	12 c0       	rjmp	.+36     	; 0xfd14 <main+0x110>
    fcf0:	e8 0c       	add	r14, r8
    fcf2:	f9 1c       	adc	r15, r9
    fcf4:	84 01       	movw	r16, r8
    fcf6:	c1 2c       	mov	r12, r1
    fcf8:	dd 24       	eor	r13, r13
    fcfa:	d3 94       	inc	r13
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
    fcfc:	0e 15       	cp	r16, r14
    fcfe:	1f 05       	cpc	r17, r15
    fd00:	09 f4       	brne	.+2      	; 0xfd04 <main+0x100>
    fd02:	5a c0       	rjmp	.+180    	; 0xfdb8 <main+0x1b4>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
    fd04:	f6 01       	movw	r30, r12
    fd06:	61 91       	ld	r22, Z+
    fd08:	6f 01       	movw	r12, r30
    fd0a:	c8 01       	movw	r24, r16
    fd0c:	97 d0       	rcall	.+302    	; 0xfe3c <__eewr_byte_m64>
    fd0e:	0f 5f       	subi	r16, 0xFF	; 255
    fd10:	1f 4f       	sbci	r17, 0xFF	; 255
    fd12:	f4 cf       	rjmp	.-24     	; 0xfcfc <main+0xf8>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
			do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
    fd14:	40 e0       	ldi	r20, 0x00	; 0
    fd16:	50 e0       	ldi	r21, 0x00	; 0
    fd18:	63 e0       	ldi	r22, 0x03	; 3
    fd1a:	c4 01       	movw	r24, r8
    fd1c:	50 d0       	rcall	.+160    	; 0xfdbe <do_spm>
    fd1e:	00 e0       	ldi	r16, 0x00	; 0
    fd20:	10 e0       	ldi	r17, 0x00	; 0
    fd22:	f8 01       	movw	r30, r16
    fd24:	f3 95       	inc	r31
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    fd26:	40 81       	ld	r20, Z
    fd28:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
    fd2a:	80 81       	ld	r24, Z
    fd2c:	50 e0       	ldi	r21, 0x00	; 0
    fd2e:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
    fd30:	61 e0       	ldi	r22, 0x01	; 1
    fd32:	c8 01       	movw	r24, r16
    fd34:	88 0d       	add	r24, r8
    fd36:	99 1d       	adc	r25, r9
    fd38:	42 d0       	rcall	.+132    	; 0xfdbe <do_spm>
    fd3a:	0e 5f       	subi	r16, 0xFE	; 254
    fd3c:	1f 4f       	sbci	r17, 0xFF	; 255
		addrPtr += 2;
	    } while (len -= 2);
    fd3e:	e0 16       	cp	r14, r16
    fd40:	f1 06       	cpc	r15, r17
    fd42:	79 f7       	brne	.-34     	; 0xfd22 <main+0x11e>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
			do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
    fd44:	40 e0       	ldi	r20, 0x00	; 0
    fd46:	50 e0       	ldi	r21, 0x00	; 0
    fd48:	65 e0       	ldi	r22, 0x05	; 5
    fd4a:	c4 01       	movw	r24, r8
    fd4c:	38 d0       	rcall	.+112    	; 0xfdbe <do_spm>
    fd4e:	34 c0       	rjmp	.+104    	; 0xfdb8 <main+0x1b4>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd50:	84 37       	cpi	r24, 0x74	; 116
    fd52:	21 f5       	brne	.+72     	; 0xfd9c <main+0x198>
      uint8_t desttype;
      GETLENGTH(length);
    fd54:	4b d0       	rcall	.+150    	; 0xfdec <getch>
    fd56:	08 2f       	mov	r16, r24
    fd58:	10 e0       	ldi	r17, 0x00	; 0
    fd5a:	10 2f       	mov	r17, r16
    fd5c:	00 27       	eor	r16, r16
    fd5e:	46 d0       	rcall	.+140    	; 0xfdec <getch>
    fd60:	08 2b       	or	r16, r24

      desttype = getch();
    fd62:	44 d0       	rcall	.+136    	; 0xfdec <getch>

      verifySpace();
    fd64:	89 83       	std	Y+1, r24	; 0x01
    fd66:	4d d0       	rcall	.+154    	; 0xfe02 <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    fd68:	89 81       	ldd	r24, Y+1	; 0x01
    fd6a:	74 01       	movw	r14, r8
    fd6c:	85 34       	cpi	r24, 0x45	; 69
    fd6e:	61 f4       	brne	.+24     	; 0xfd88 <main+0x184>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
    fd70:	c7 01       	movw	r24, r14
    fd72:	5c d0       	rcall	.+184    	; 0xfe2c <__eerd_byte_m64>
    fd74:	37 d0       	rcall	.+110    	; 0xfde4 <putch>
	} while (--length);
    fd76:	01 50       	subi	r16, 0x01	; 1
    fd78:	11 09       	sbc	r17, r1
    fd7a:	ff ef       	ldi	r31, 0xFF	; 255
    fd7c:	ef 1a       	sub	r14, r31
    fd7e:	ff 0a       	sbc	r15, r31
    fd80:	01 15       	cp	r16, r1
    fd82:	11 05       	cpc	r17, r1
    fd84:	a9 f7       	brne	.-22     	; 0xfd70 <main+0x16c>
    fd86:	18 c0       	rjmp	.+48     	; 0xfdb8 <main+0x1b4>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    fd88:	f7 01       	movw	r30, r14
    fd8a:	85 91       	lpm	r24, Z+
    fd8c:	7f 01       	movw	r14, r30
    fd8e:	2a d0       	rcall	.+84     	; 0xfde4 <putch>
	} while (--length);
    fd90:	01 50       	subi	r16, 0x01	; 1
    fd92:	11 09       	sbc	r17, r1
    fd94:	01 15       	cp	r16, r1
    fd96:	11 05       	cpc	r17, r1
    fd98:	b9 f7       	brne	.-18     	; 0xfd88 <main+0x184>
    fd9a:	0e c0       	rjmp	.+28     	; 0xfdb8 <main+0x1b4>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd9c:	85 37       	cpi	r24, 0x75	; 117
    fd9e:	39 f4       	brne	.+14     	; 0xfdae <main+0x1aa>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fda0:	30 d0       	rcall	.+96     	; 0xfe02 <verifySpace>
      putch(SIGNATURE_0);
    fda2:	8e e1       	ldi	r24, 0x1E	; 30
    fda4:	1f d0       	rcall	.+62     	; 0xfde4 <putch>
      putch(SIGNATURE_1);
    fda6:	86 e9       	ldi	r24, 0x96	; 150
    fda8:	1d d0       	rcall	.+58     	; 0xfde4 <putch>
      putch(SIGNATURE_2);
    fdaa:	82 e0       	ldi	r24, 0x02	; 2
    fdac:	69 cf       	rjmp	.-302    	; 0xfc80 <main+0x7c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    fdae:	81 35       	cpi	r24, 0x51	; 81
    fdb0:	11 f4       	brne	.+4      	; 0xfdb6 <main+0x1b2>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fdb2:	88 e0       	ldi	r24, 0x08	; 8
    fdb4:	22 d0       	rcall	.+68     	; 0xfdfa <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fdb6:	25 d0       	rcall	.+74     	; 0xfe02 <verifySpace>
    }
    putch(STK_OK);
    fdb8:	80 e1       	ldi	r24, 0x10	; 16
    fdba:	14 d0       	rcall	.+40     	; 0xfde4 <putch>
  }
    fdbc:	52 cf       	rjmp	.-348    	; 0xfc62 <main+0x5e>

0000fdbe <do_spm>:
        "z" ((uint16_t)address),
        "r" ((uint16_t)data)
    : "r0"
    );
#else
     asm volatile (
    fdbe:	fc 01       	movw	r30, r24
    fdc0:	0a 01       	movw	r0, r20
    fdc2:	60 93 68 00 	sts	0x0068, r22
    fdc6:	e8 95       	spm
    fdc8:	11 24       	eor	r1, r1
#endif    

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    fdca:	80 91 68 00 	lds	r24, 0x0068
    fdce:	80 fd       	sbrc	r24, 0
    fdd0:	fc cf       	rjmp	.-8      	; 0xfdca <do_spm+0xc>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    fdd2:	66 70       	andi	r22, 0x06	; 6
    fdd4:	31 f0       	breq	.+12     	; 0xfde2 <do_spm+0x24>
    fdd6:	45 2b       	or	r20, r21
    fdd8:	21 f4       	brne	.+8      	; 0xfde2 <do_spm+0x24>
      // Reenable read access to flash
#if !defined(__AVR_ATmega64__) && !defined(__AVR_ATmega128__)      
      boot_rww_enable();
#else
      __boot_rww_enable();
    fdda:	81 e1       	ldi	r24, 0x11	; 17
    fddc:	80 93 68 00 	sts	0x0068, r24
    fde0:	e8 95       	spm
    fde2:	08 95       	ret

0000fde4 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    fde4:	5d 9b       	sbis	0x0b, 5	; 11
    fde6:	fe cf       	rjmp	.-4      	; 0xfde4 <putch>
  UART_UDR = ch;
    fde8:	8c b9       	out	0x0c, r24	; 12
    fdea:	08 95       	ret

0000fdec <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    fdec:	5f 9b       	sbis	0x0b, 7	; 11
    fdee:	fe cf       	rjmp	.-4      	; 0xfdec <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    fdf0:	5c 99       	sbic	0x0b, 4	; 11
    fdf2:	01 c0       	rjmp	.+2      	; 0xfdf6 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fdf4:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    fdf6:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fdf8:	08 95       	ret

0000fdfa <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdfa:	98 e1       	ldi	r25, 0x18	; 24
    fdfc:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    fdfe:	81 bd       	out	0x21, r24	; 33
    fe00:	08 95       	ret

0000fe02 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fe02:	f4 df       	rcall	.-24     	; 0xfdec <getch>
    fe04:	80 32       	cpi	r24, 0x20	; 32
    fe06:	19 f0       	breq	.+6      	; 0xfe0e <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fe08:	88 e0       	ldi	r24, 0x08	; 8
    fe0a:	f7 df       	rcall	.-18     	; 0xfdfa <watchdogConfig>
    fe0c:	ff cf       	rjmp	.-2      	; 0xfe0c <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fe0e:	84 e1       	ldi	r24, 0x14	; 20
    fe10:	e9 cf       	rjmp	.-46     	; 0xfde4 <putch>

0000fe12 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fe12:	cf 93       	push	r28
    fe14:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fe16:	ea df       	rcall	.-44     	; 0xfdec <getch>
    fe18:	c1 50       	subi	r28, 0x01	; 1
    fe1a:	e9 f7       	brne	.-6      	; 0xfe16 <getNch+0x4>
  verifySpace();
}
    fe1c:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    fe1e:	f1 cf       	rjmp	.-30     	; 0xfe02 <verifySpace>

0000fe20 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    fe20:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    fe22:	80 e0       	ldi	r24, 0x00	; 0
    fe24:	ea df       	rcall	.-44     	; 0xfdfa <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    fe26:	e0 e0       	ldi	r30, 0x00	; 0
    fe28:	ff 27       	eor	r31, r31
    fe2a:	09 94       	ijmp

0000fe2c <__eerd_byte_m64>:
    fe2c:	e1 99       	sbic	0x1c, 1	; 28
    fe2e:	fe cf       	rjmp	.-4      	; 0xfe2c <__eerd_byte_m64>
    fe30:	9f bb       	out	0x1f, r25	; 31
    fe32:	8e bb       	out	0x1e, r24	; 30
    fe34:	e0 9a       	sbi	0x1c, 0	; 28
    fe36:	99 27       	eor	r25, r25
    fe38:	8d b3       	in	r24, 0x1d	; 29
    fe3a:	08 95       	ret

0000fe3c <__eewr_byte_m64>:
    fe3c:	26 2f       	mov	r18, r22

0000fe3e <__eewr_r18_m64>:
    fe3e:	e1 99       	sbic	0x1c, 1	; 28
    fe40:	fe cf       	rjmp	.-4      	; 0xfe3e <__eewr_r18_m64>
    fe42:	9f bb       	out	0x1f, r25	; 31
    fe44:	8e bb       	out	0x1e, r24	; 30
    fe46:	2d bb       	out	0x1d, r18	; 29
    fe48:	0f b6       	in	r0, 0x3f	; 63
    fe4a:	f8 94       	cli
    fe4c:	e2 9a       	sbi	0x1c, 2	; 28
    fe4e:	e1 9a       	sbi	0x1c, 1	; 28
    fe50:	0f be       	out	0x3f, r0	; 63
    fe52:	01 96       	adiw	r24, 0x01	; 1
    fe54:	08 95       	ret
